// Code generated by hertz generator.

package douyin_core

import (
	"context"
	douyin_core "dy/biz/model/douyin_core"
	utils "dy/biz/util"
	"fmt"

	dao "dy/biz/db"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /hello [GET]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin_core.DouyinUserLoginRequest
	c.BindAndValidate(&req)
	hlog.Info(req.Username + ":" + req.Password)
	resp := new(douyin_core.DouyinUserLoginResponse)
	if len(req.Password) == 0 || len(req.Username) == 0 {
		resp.StatusCode = LOGIN_NO_REQUEST
		resp.StatusMsg = GetStatusMsg(LOGIN_NO_REQUEST)
		c.JSON(consts.StatusOK, resp)
		return
	}
	u := dao.UserInfo(req.Username)
	hlog.Info(u)
	if len(u) == 0 {
		resp.StatusCode = LOGIN_ERROR_PASS_USER
		resp.StatusMsg = GetStatusMsg(LOGIN_ERROR_PASS_USER)
		c.JSON(500, resp)
		return
	}
	username := req.Username
	password := req.Password
	hlog.Info(u[0].Username)
	hlog.Info(u[0].Password)
	if u[0].Username != username || u[0].Password != password {
		resp.StatusCode = ERR_USERNAME_PASSWORD
		resp.StatusMsg = GetStatusMsg(ERR_USERNAME_PASSWORD)
		c.JSON(consts.StatusOK, resp)
		return
	}
	s, err := utils.GeneratorToken(u[0])
	hlog.Info("token " + s)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.StatusCode = SUCCESS
	resp.StatusMsg = GetStatusMsg(SUCCESS)
	resp.Token = s
	resp.UserId = u[0].Id
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /get/user/info [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin_core.DouyinUserRequest
	c.BindAndValidate(&req)
	resp := new(douyin_core.DouyinUserResponse)
	t := req.Token
	mc, err := utils.ParseToken(t)
	hlog.Info(t)
	u := douyin_core.User{
		Id:   mc.UserId,
		Name: mc.Name,
	}
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	FillUser(&u)
	resp.StatusCode = SUCCESS
	resp.StatusMsg = GetStatusMsg(SUCCESS)
	resp.User = &u
	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin_core.DouyinUserRegisterRequest
	req.Name = "李四"
	c.BindAndValidate(&req)
	hlog.Info(fmt.Printf("register req: %v ", req))
	resp := new(douyin_core.DouyinUserRegisterResponse)
	if len(req.Name) == 0 || len(req.Username) == 0 || len(req.Password) == 0 {
		resp.StatusCode = LOGIN_NO_REQUEST
		resp.StatusMsg = GetStatusMsg(LOGIN_NO_REQUEST)
		c.JSON(consts.StatusOK, resp)
		return
	}
	u := dao.UserInfo(req.Username)
	if len(u) > 0 {
		resp.StatusCode = LOGIN_ERROR_UNION
		resp.StatusMsg = GetStatusMsg(LOGIN_ERROR_UNION)
		c.JSON(consts.StatusOK, resp)
		return
	}
	var user douyin_core.User
	user.Name = req.Name
	user.Username = req.Username
	user.Password = req.Password
	uid := dao.UserRegister(&user)
	t, err := utils.GeneratorToken(&user)
	if err != nil {
		resp.StatusCode = FAILD
		resp.StatusMsg = GetStatusMsg(FAILD)
		c.JSON(consts.StatusInternalServerError, resp)
	}
	resp.StatusCode = SUCCESS
	resp.StatusMsg = GetStatusMsg(SUCCESS)
	resp.Token = t
	resp.UserId = uid
	c.JSON(consts.StatusOK, resp)
}
